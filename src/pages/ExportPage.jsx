import React, { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import jsPDF from "jspdf";
import "jspdf-autotable";

const ExportPage = () => {
  const location = useLocation();
  const pitchData = location.state?.pitch || null;
  const [loading, setLoading] = useState(false);

  const downloadPDF = () => {
    if (!pitchData) return alert("No pitch data found!");
    setLoading(true);

    const doc = new jsPDF();

    // ðŸ§¾ Title Section
    doc.setFont("helvetica", "bold");
    doc.setFontSize(20);
    doc.text("PitchCraft - AI Startup Pitch", 14, 20);

    // ðŸŽ¯ Info Section
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text(`Startup Name: ${pitchData.startupName}`, 14, 40);
    doc.text(`Tagline: ${pitchData.tagline}`, 14, 50);

    // ðŸ§© Pitch Section
    doc.setFont("helvetica", "bold");
    doc.text("Pitch:", 14, 65);
    doc.setFont("helvetica", "normal");
    doc.text(doc.splitTextToSize(pitchData.pitch, 180), 14, 72);

    // ðŸ‘¥ Audience Section
    doc.setFont("helvetica", "bold");
    doc.text("Target Audience:", 14, 105);
    doc.setFont("helvetica", "normal");
    doc.text(doc.splitTextToSize(pitchData.targetAudience, 180), 14, 112);

    // ðŸŽ¨ Color Palette Idea
    if (pitchData.colorPaletteIdea) {
      doc.setFont("helvetica", "bold");
      doc.text("Color Palette Idea:", 14, 145);
      doc.setFont("helvetica", "normal");
      doc.text(doc.splitTextToSize(pitchData.colorPaletteIdea, 180), 14, 152);
    }

    // ðŸ“… Footer
    doc.setFontSize(10);
    doc.text(
      "Generated by PitchCraft AI Assistant",
      14,
      280
    );

    doc.save(`${pitchData.startupName || "PitchCraft"}_Pitch.pdf`);
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center px-4">
      <div className="bg-white shadow-lg rounded-2xl p-8 w-full max-w-2xl text-center">
        <h1 className="text-2xl font-bold text-indigo-600 mb-4">
          ðŸ“„ Export Your Pitch
        </h1>

        {pitchData ? (
          <>
            <div className="text-left bg-gray-100 p-5 rounded-lg shadow-inner mb-5">
              <p className="text-lg font-semibold text-indigo-700">
                {pitchData.startupName}
              </p>
              <p className="italic text-gray-600 mb-3">"{pitchData.tagline}"</p>
              <p className="text-gray-700 mb-2">
                <strong>Pitch:</strong> {pitchData.pitch}
              </p>
              <p className="text-gray-700 mb-2">
                <strong>Audience:</strong> {pitchData.targetAudience}
              </p>
              {pitchData.colorPaletteIdea && (
                <p className="text-gray-700">
                  <strong>Color Palette:</strong> {pitchData.colorPaletteIdea}
                </p>
              )}
            </div>

            <button
              onClick={downloadPDF}
              disabled={loading}
              className="bg-indigo-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-indigo-700 transition-all"
            >
              {loading ? "Generating PDF..." : "Download as PDF"}
            </button>
          </>
        ) : (
          <p className="text-gray-600">No pitch data to export ðŸ˜•</p>
        )}
      </div>
    </div>
  );
};

export default ExportPage;

